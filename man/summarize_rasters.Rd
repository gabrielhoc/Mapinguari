% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summarize_rasters.R
\name{summarize_rasters}
\alias{summarize_rasters}
\title{Groups rasters by duration of phenological event.}
\usage{
summarize_rasters(raster_stack, seasons = list(year = c(1:12)),
  summaryFUN = "mean", summary_args = NULL, separator = "_",
  time_res = 12)
}
\arguments{
\item{raster_stack}{RasterStack.}

\item{seasons}{numerical vector or function. Months at the beggining and end of phenological events, or function relating phenological event to environmental conditions. If NULL, no summarizing is made (remains by month).}

\item{summaryFUN}{function. Function used to summarize months inside seasons.}

\item{summary_args}{named list. Additional arguments for summarizing function.}

\item{separator}{character. Character that separates variable names, years and scenarios.}

\item{time_res}{integer. How many layers do time varying variables have? Default is 12, as in 12 months in a year, the time resolution in WorldClim.}
}
\value{
Returns a list of raster stacks for the variables required, organized by year/scenario combination.
}
\description{
\code{summarize_rasters} Summarize rasters by duration of phenological event.
}
\examples{

Fulanus_Ecorasters_download <-
  get_rasters(
    ext = FulanusDistribution,
    margin = 5,
    non_fixed_var = c('prec', 'tmin', 'tmax'),
    years = c("present", '2050', '2070'),
    scenarios = c('rcp26', 'rcp45', 'rcp85'),
    alert = 6)

Phenology_mean_sd <-
  lapply(Fulanus_Ecorasters_download, summarize_rasters,
    seasons = list(breeding = c(3:8), non_breeding = c(9:12, 1, 2)),
    summaryFUN = list(tmax = c("mean", "sd"), tmin = c("mean", "sd"), prec = "sum"))

Phenology_weighted_mean <-
  lapply(Fulanus_Ecorasters_download, summarize_rasters,
    seasons = list(breeding = c(3:8), non_breeding = c(9:12, 1, 2)),
    summaryFUN = "weighted.mean",
    summary_args = list(w = c(0.5, rep(1, 4), 0.5))
  )

Phen_model <- fit_curves(formula = breeding + 0.0001 ~ SSlogis(log(prec), Asym, xmid, scal),
  predict_formals = "prec",
  data = FulanusBreeding,
  fitFUN = nls
)

PhenFUN1 <- Phen_model$model_1$predict

season_rain_rasters <-
  transform_rasters(raster_stack = FulanusEcoRasters_present$present,
    transformFUN = list(season_rain = PhenFUN1),
    transformFUN_args = list(prec = 'prec'))

FulanusEcoRasters_season_rain <-
  summarize_rasters(Perf_rasters_tmax,
    seasons = list(year = c(1:12)),
    summaryFUN = "weighted.mean",
    summary_args = list(weights = season_rain_rasters))


PhenFUN2 <- function(x) ifelse(x > 80, 1, 0)

season_performance_rasters <-
  transform_rasters(raster_stack = FulanusEcoRasters_present$present,
    transformFUN = list(season_rain = PhenFUN2),
    transformFUN_args = list(prec = 'prec'))

FulanusEcoRasters_season_performance <-
  summarize_rasters(FulanusEcoRasters_present$present[[1:12]],
    seasons = list(year = c(1:12)),
    summaryFUN = "weighted.mean",
    summary_args = list(weights = season_performance_rasters))


}
